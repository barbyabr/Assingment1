@page "/CreatePost"
@using Domain.Models
@using HttpClients.ClientInterfaces
@using Domain.DTOs
@using BlazorWASM.Services
@inject IUserService userService
@inject IPostService postService
@inject IAuthService authService

<AuthorizeView>
    <NotAuthorized>
        <p><img src="icons/mdfk.png" class="mdfk" alt="Log in md'fk"/></p>
    </NotAuthorized>
<Authorized>

    <div class="card">
        @if (users == null)
        {
            <label>Loading users...</label>
        }
        else if (!users.Any())
        {
            <label>No users, you cannot create a post without an account.</label>
        }
        else
        {
            <h3>Create Post</h3>
            <div class="form-group field">
                <label>Title:</label>
                <input type="text" @bind="PostTitle"/>
            </div>
            <div class="form-group field">
                <label>Post:</label>
                <input type="text" @bind="PostText"/>
            </div>
            <div class="button-row">
                @if (!string.IsNullOrEmpty(msg))
                {
                    <label style="color: red">@msg</label>
                }
                <button @onclick="Create" class="acceptbtn">Create</button>
            </div>
        }
    </div>
</Authorized>
</AuthorizeView>

@code {
    private IEnumerable<User>? users;
    private string? selectedUserName;
    private string PostTitle = "";
    private string PostText = "";

    private string msg = "";

    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            users = await userService.GetUsersAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task Create()
    {
        msg = "";
        if (string.IsNullOrEmpty(PostTitle) || string.IsNullOrEmpty(PostText))
        {
            msg = "Title and post cannot be empty!";
            return;
        }
        else
        {
            try
            {
                selectedUserName = authService.GetAuthAsync().Result.Identity.Name;
                PostCreationDto dto = new((String)selectedUserName, PostTitle, PostText);
                await postService.CreateAsync(dto);
                msg = "Post created";
                PostTitle = "";
                PostText = "";
                selectedUserName = null;
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                msg = e.Message;
            }
        }

    }
}